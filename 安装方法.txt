教程原链接及参考：
Anankke的https://wiki.sspanel.host/#/
https://fenghe.us/sspanel-docker-node-quick-install-ubuntu-18-04-lts/
https://fenghe.us/how-to-set-up-an-ss-airport/
如有侵权请联系我删除，谢谢！


前端篇：
自豪的使用 LNMP 部署 SSPanel 魔改版
2019 年 09 月 23 日・技术 • 阅读设置
在 Debian 9 上使用最正规的方式搭建 SSPanel 魔改版
—— SSPanel 魔改版 LEMP/LNMP 安装教程

本文全文禁止转载。
本文将介绍如何使用第三方源在 Debian Stretch 发行版安装最新版 LEMP 并部署 SSPanel 魔改版。

宝塔是什么辣鸡？

（本文 LNMP 安装过程严重参考兽兽大佬的这篇博客。Debian 8 请点进去自己举一反三。）

首先我们需要一台运行 Debian 9 发行版的服务器，请尽量选择内存大于 2G 性能充足的机器（放面板还舍不得用好机器？ 当然512MB也可以，得分配虚拟内存。）如果你非要选国内机器的话，我代国家安全局祝您身体健康。

我们需要依次安装 Nginx + PHP + Percona Server（MySQL 的开源替代品）。

一般来讲大部分 IDC 会直接提供 root 帐号。如果不是请先执行 sudo -i 切换至 root 权限，再运行以下命令。

对于内存较小的机器先分配虚拟内存！！！！！
fallocate -l 2G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
swapon --show




0x00 准备工作
0x01 更新系统并安装必要软件包
apt update && apt upgrade -y
apt install -y curl vim wget unzip apt-transport-https lsb-release ca-certificates git

0x02 加入 Backports 源方便安装更新的软件
cat >> /etc/apt/sources.list.d/backports.list << EOF
deb http://deb.debian.org/debian $(lsb_release -sc)-backports main
deb-src http://deb.debian.org/debian $(lsb_release -sc)-backports main
EOF

apt -t stretch-backports update && apt -y -t stretch-backports upgrade


0x03 设置当前系统时间为 UTC+8
ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo Asia/Shanghai > /etc/timezone


0x10 安装 Nginx
我们使用 Ondřej Surý 大神打包好的 Nginx 源，连 TLS 1.3 都编译好了（

0x11 添加 Nginx 源
wget -O /etc/apt/trusted.gpg.d/nginx-mainline.gpg https://packages.sury.org/nginx-mainline/apt.gpg
cat >> /etc/apt/sources.list.d/nginx.list << EOF
deb https://packages.sury.org/nginx-mainline/ $(lsb_release -sc) main
EOF

0x12 屏蔽 Backports 仓库中的 Nginx
cat >> /etc/apt/preferences << EOF
Package: nginx*
Pin: release a=stretch-backports
Pin-Priority: 499
EOF

0x13 更新源信息并安装 Nginx
apt update
apt install -y nginx-extras
systemctl enable nginx

0x14 检查 nginx 版本
无错误执行完毕之后，我们使用 nginx -v 命令检查 nginx 版本
示例：
root@ank:~# nginx -v
nginx version: nginx/1.15.9
至此 Nginx 安装完成。

0x20 安装 PHP
同样使用 Ondřej Surý 大神打包的 PHP 源，我们选择最新的 PHP 7.3 安装。

Ondřej Surý 大佬打包的 PHP 源更是好用，Ubuntu 的 PPA for PHP 就是这位大佬做的，当然少不了 Debian 的源了。
0x21 添加 PHP 源
wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
sh -c 'echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list'

0x22 更新源信息并安装 PHP 7.3 和常用组件
apt update
apt install -y php7.3-fpm php7.3-mysql php7.3-curl php7.3-gd php7.3-mbstring php7.3-xml php7.3-xmlrpc php7.3-opcache php7.3-zip php7.3 php7.3-json php7.3-bz2 php7.3-bcmath
提示：这里安装的 php-fpm 的重启命令为 systemctl restart php7.3-fpm
至此 PHP 7.3 安装完成。

0x30 安装 Percona Server 8
“Percona Server 是由 Oracle 发布的最接近官方 MySQL Enterprise 发行版的版本。”
Percona Server 与 MySQL 完全兼容，不必担心对接问题。

0x31 添加并启用 Percona Server 官方源
wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
percona-release setup ps80

0x32 安装 Percona Server
apt install -y percona-server-server
安装过程中会弹出设置密码界面，自行设置即可。

接下来会弹出加密方法选择界面。由于 MySQL 8 的最新加密方法大多数客户端不支持，所以我们这里选择第二种也就是传统加密方法。

0x33 检查 Percona Server 版本
无错误执行完毕之后，我们使用 mysql -V 命令检查 Percona Server 版本
示例：
root@ank:~# mysql -V
mysql  Ver 8.0.15-5 for debian-linux-gnu on x86_64 (Percona Server (GPL), Release '5', Revision 'f8a9e99')
至此 LNMP 就安装完成了。

0x40 部署 SSPanel 魔改版
请自行将 你的域名 替换为相应内容(没有域名换成IP)。
0x41 安装网站程序
cd /var/www/
mkdir 你的域名
cd 你的域名
git clone -b master https://github.com/Anankke/SSPanel-Uim.git tmp && mv tmp/.git . && rm -rf tmp && git reset --hard
备份 git clone -b master https://github.com/HyoukaChitandaEru/SSPanel-Uim.git tmp && mv tmp/.git . && rm -rf tmp && git reset --hard
git config core.filemode false
wget https://getcomposer.org/installer -O composer.phar
php composer.phar
php composer.phar install
cd ../
chmod -R 755 你的域名/
chown -R www-data:www-data 你的域名/
0x42 配置 nginx 配置文件
需要配置的伪静态代码：

location / {
    try_files $uri /index.php$is_args$args;
}
在 /etc/nginx/sites-enabled/你的域名.conf 中可以写入以下参考配置文件：

server {  
        listen 80;
        listen [::]:80;
        root /var/www/你的域名/public; # 改成你自己的路径
        index index.php index.html;
        server_name 你的域名; # 改成你自己的域名

        location / {
            try_files $uri /index.php$is_args$args;
        }

        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/run/php/php7.3-fpm.sock;
        }
}
添加完成后使用命令 systemctl restart nginx 重启 Nginx。
至此 Nginx 配置完成。

0x43 创建并导入数据库
mysql -u root -p
mysql>CREATE DATABASE 你的数据库名称;
mysql>use 你的数据库名称;
mysql>source /var/www/你的域名/sql/glzjin_all.sql;
mysql>exit
0x44 配置网站程序
cd /var/www/你的域名/
cp config/.config.example.php config/.config.php
nano config/.config.php
请按照自己的需求修改 config/.config.php，配置项比较多可以以后再改。为了下一步的正确执行请先务必确保数据库连接信息正确。
虽然并未完成所有配置，但是这个时候网站就可以打开了。

0x45 创建管理员并同步用户
依次执行以下命令：

php xcat createAdmin
php xcat syncusers
php xcat initQQWry
php xcat resetTraffic
php xcat initdownload
如果创建管理员出错请检查 config/.config.php 中的数据库连接信息。

0x46 配置定时任务
执行 crontab -e 命令，添加以下四条：
30 22 * * * php /var/www/你的域名/xcat sendDiaryMail
0 0 * * * php -n /var/www/你的域名/xcat dailyjob
*/1 * * * * php /var/www/你的域名/xcat checkjob
*/1 * * * * php /var/www/你的域名/xcat syncnode
如果需要自动备份，可模仿以下两例，自行添加一条。

每 20 分钟备份 1 次（若间隔大于 60 分钟看下个例子）：

*/20 * * * * php -n /var/www/你的域名/xcat backup
每 20 小时备份 1 次（若间隔大于 24 小时请学会熟练使用搜索引擎）：

0 */20 * * * php -n /var/www/你的域名/xcat backup
如果需要财务报表，可选添加以下三条：

5 0 * * * php /var/www/你的域名/xcat sendFinanceMail_day
6 0 * * 0 php /var/www/你的域名/xcat sendFinanceMail_week
7 0 1 * * php /var/www/你的域名/xcat sendFinanceMail_month
如果需要检测被墙，需要添加：

*/1 * * * * php /var/www/你的域名/xcat detectGFW
如果要用到 radius，需要添加下面这三条：

*/1 * * * * php /var/www/你的域名/xcat synclogin
*/1 * * * * php /var/www/你的域名/xcat syncvpn
*/1 * * * * php -n /var/www/你的域名/xcat syncnas
至此面板全部安装完成，又一个万人机场就此诞生。


中篇：登录网站去添加节点


后端篇：（Ubuntu和Debian通过测试）
对于内存较小的机器先分配虚拟内存
fallocate -l 2G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
swapon --show

禁用IPv6（可不做这一步）
$ cat >>  /etc/sysctl.conf << EOF
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF

开启BBR加速器(现在很多主机自带BBR并默认开启，可跳过)
echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
sysctl -p

Docker一键安装
安装docker
apt-get install curl
docker version > /dev/null || curl -fsSL get.docker.com | bash
service docker restart

docker一键启动后台
docker run -d --name=ssrmu -e NODE_ID=4 -e API_INTERFACE=modwebapi -e WEBAPI_URL="http://64.154.38.6" -e WEBAPI_TOKEN=violet -e MU_SUFFIX=microsoft.com -e SPEEDTEST=0 --network=host --log-opt max-size=50m --log-opt max-file=3 --restart=always fanvinga/docker-ssrmu
注意，没有域名按照上面的填写ip方法填写（要加http），有域名填域名；WEBAPI_TOKEN=NimaQu  中填写的是前端config中的muKey属性（例如我改成了violet）    代码中的微软网址是混淆一遍可以不填写，例如以下的写法：：
docker run -d --name=ssrmu -e NODE_ID=节点ID -e API_INTERFACE=modwebapi -e WEBAPI_URL="需要对接的地址" -e WEBAPI_TOKEN=前端设置的token --network=host --log-opt max-size=50m --log-opt max-file=3 --restart=always fanvinga/docker-ssrmu

即：docker run -d --name=ssrmu -e NODE_ID=3 -e API_INTERFACE=modwebapi -e WEBAPI_URL="http://64.154.38.6" -e WEBAPI_TOKEN=violet --network=host --log-opt max-size=50m --log-opt max-file=3 --restart=always fanvinga/docker-ssrmu



查看docker log，确保docker正确运行
docker logs -f ssrmu
